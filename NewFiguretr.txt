void mouse( int button, int state, int x, int y )
{
  if ( button == GLUT_LEFT_BUTTON && state == GLUT_DOWN ) {
    moving=true;
    forwards=true;
    //        theta[angle] += 5.0;
    //        if ( theta[angle] > 360.0 ) { theta[angle] -= 360.0; }
  }
  if ( button == GLUT_LEFT_BUTTON && state == GLUT_UP ) {
    moving=false;
  }

  if ( button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN ) {
    moving=true;
    forwards=false;
    //        theta[angle] -= 5.0;
    //        if ( theta[angle] < 0.0 ) { theta[angle] += 360.0; }
  }
  if ( button == GLUT_RIGHT_BUTTON && state == GLUT_UP ) {
    moving=false;
  }

  //mvstack.push( model_view );

  //    fixup_transforms(angle);
  // model_view = mvstack.pop();
  glutPostRedisplay();
}

//----------------------------------------------------------------------------

void menu( int option ) {
    if ( option == Quit ) exit( EXIT_SUCCESS );
    angle = option;
}

//----------------------------------------------------------------------------

void reshape( int width, int height ) {
    glViewport( 0, 0, width, height );

    GLfloat left = -10.0, right = 10.0;
    GLfloat bottom = -10.0, top = 10.0;
    //    GLfloat zNear = -10.0, zFar = 10.0;

    GLfloat aspect = GLfloat( width ) / height;

    if ( aspect > 1.0 ) {
        left *= aspect;
        right *= aspect;
    }
    else {
        bottom /= aspect;
        top /= aspect;
    }

    //    mat4 projection = Ortho( left, right, bottom, top, zNear, zFar );

    mat4 projection = Perspective(80, aspect, 0.1, 100.0);
    glUniformMatrix4fv( Projection, 1, GL_TRUE, projection );

    //    model_view = mat4( 1.0 );   // An Identity matrix
    model_view = Translate(0,0,-15);   // Initial camera translation
}
